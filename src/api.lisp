(in-package #:cl-neovim)


(defvar *here* #.(or *compile-file-pathname* *load-pathname* *default-pathname-defaults*))
(defvar *generated-api-file* (merge-pathnames "generated-api" *here*))

(cl:defun function-metadata (f)
  (loop for k being the hash-keys in f using (hash-value v)
        append (list (alexandria:make-keyword (vim-name->symbol k)) v)))

(cl:defun parse-api (api)
  (let ((functions (gethash "functions" api)))
    (loop for f in functions
          collect (function-metadata f))))

(cl:defun retrieve-api ()
  (second (call/s t "vim_get_api_info")))

(cl:defun remove-shadowing-definitions (parsed-api)
  (let* ((sorted-api (sort parsed-api #'> :key #'(lambda (md) (getf md :since))))
         (fn-names (mapcar #'(lambda (md) (vim-name->symbol (clean-up-name (getf md :name)))) sorted-api))
         (settersp (mapcar #'(lambda (md) (setterp (getf md :name))) sorted-api)))
    (let* ((removed-manual-api (remove-if #'(lambda (fn-name)
                                              (find fn-name *manual-implementation*))
                                          (zip sorted-api fn-names settersp) :key #'second))
           (removed-duplicates (remove-duplicates removed-manual-api :key #'rest :test #'equal :from-end T)))
      (mapcar #'first removed-duplicates))))


(cl:defun generate-api (&optional (filename *generated-api-file*))
  (let* ((api (remove-shadowing-definitions (parse-api (retrieve-api))))
         (exports (mapcar #'(lambda (md) (vim-name->symbol (clean-up-name (getf md :name)))) api))
         (permission-to-write (y-or-n-p (format NIL "Writing generated API into ~A. Continue?" filename))))
    (when permission-to-write
      (with-open-file (out filename :direction :output :if-exists :supersede :if-does-not-exist :create)
        (format out ";;; File automatically generated by (nvim::generate-api)~%")
        (format out "(in-package :cl-neovim)~%~%~%")
        (loop for metadata in api
              do (format out "~{~S~%~%~}~%" (apply #'mdata->lisp-function metadata)))
        (format out "(export '~A)~%" (remove-duplicates exports))    
        (format out "(export '~A)~%" (mapcar #'(lambda (sym) (symbol-concat sym '/a)) (remove-duplicates exports)))))))
