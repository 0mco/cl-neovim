(in-package #:cl-neovim)


(cl:defun parse-parameters (parameters)
  "Extract names from nvim api's metadata of arguments into a list of symbols."
  (cond ((listp parameters) (mapcar #'(lambda (arg) (vim-name->symbol (second arg))) parameters))
        ((stringp parameters) (list (vim-name->symbol parameters)))
        (t NIL)))

(defmacro mdata->lisp-function (&key name parameters &allow-other-keys)
  "Create functions from the parsed nvim api (generated by api.lisp)."
  (let* ((parameters (append (parse-parameters parameters)))
         (instance-parameter '(&optional (instance *nvim-instance*)))
         (fn-name (vim-name->symbol (clean-up-name name)))
         (sync-fn-name (symbol-concat fn-name '/s))
         (async-fn-name (symbol-concat fn-name '/a))
         (funcalls `((,fn-name #'call/s)
                     (,sync-fn-name #'call/s)
                     (,async-fn-name #'call/a))))
    `(progn
       ,@(loop for (fn-name fn) in funcalls
               collect (if (setterp name)
                         `(cl:defun (setf ,fn-name) (,@(last parameters) ,@(butlast parameters) ,@instance-parameter)
                            (funcall ,fn instance ,name ,@parameters))
                         `(cl:defun ,fn-name (,@parameters ,@instance-parameter)
                            (funcall ,fn instance ,name ,@parameters)))))))
